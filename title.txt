<html lang="zh-cn">
<head>
  <meta charset="UTF-8">
  <title>删除题目</title>
  <style>
    body { font-family: Arial, sans-serif; background: #f8f8f8; margin: 0; padding: 0; }
    .container { max-width: 400px; margin: 60px auto; background: #fff; border-radius: 8px; box-shadow: 0 2px 8px #0001; padding: 32px; }
    h2 { text-align: center; color: #333; }
    label { display: block; margin-top: 18px; color: #555; }
    input[type="number"], input[type="password"] { width: 100%; padding: 8px; margin-top: 6px; border: 1px solid #ccc; border-radius: 4px; }
    button { margin-top: 24px; width: 100%; padding: 10px; background: #1976d2; color: #fff; border: none; border-radius: 4px; font-size: 16px; cursor: pointer; }
    button:disabled { background: #aaa; }
    .msg { margin-top: 18px; text-align: center; color: #d32f2f; }
    .success { color: #388e3c; }
    #showTitle { margin-top:8px; color:#1976d2; min-height:24px;}
  </style>
</head>
<body>
  <script>
    // 防调试防右键
    document.addEventListener('contextmenu', function(e) { e.preventDefault(); });
    document.addEventListener('keydown', function(e) {
      if (
        e.key === 'F12' ||
        (e.ctrlKey && e.shiftKey && (e.key === 'I' || e.key === 'J' || e.key === 'C')) ||
        (e.ctrlKey && e.key === 'U')
      ) {
        e.preventDefault();
        e.stopPropagation();
        return false;
      }
    });
    document.addEventListener('selectstart', function(e) { e.preventDefault(); });
  </script>
  <div class="container">
    <h2>删除题目</h2>
    <label for="id">题目编号（行号）</label>
    <input type="number" id="id" min="1" required>
    <div id="showTitle"></div>
    <label for="psd">密码</label>
    <input type="password" id="psd" required>
    <button id="deleteBtn">删除</button>
    <div class="msg" id="msg"></div>
  </div>
  <script>
    // 配置区：请根据你的仓库信息修改
    const owner = 'zzj-jack';
    const repo = 'truth-words-tools';
    const path = 'title.txt';
    const branch = 'main';

    async function readLocalFile(filename) {
      try {
        const res = await fetch(filename + '?t=' + Date.now());
        if (!res.ok) throw new Error('读取 ' + filename + ' 失败');
        return await res.text();
      } catch (e) {
        return null;
      }
    }

    async function getTitleTxtSha(token) {
      // 获取 title.txt 的 sha
      const url = `https://gitee.com/api/v5/repos/${owner}/${repo}/contents/${path}?ref=${branch}&access_token=${token}`;
      const res = await fetch(url);
      if (!res.ok) return null;
      const data = await res.json();
      return data.sha;
    }

    async function updateTitleTxt(newContent, sha, token) {
      // 提交新的 title.txt
      const url = `https://gitee.com/api/v5/repos/${owner}/${repo}/contents/${path}`;
      const body = {
        access_token: token,
        content: btoa(unescape(encodeURIComponent(newContent))),
        message: '删除题目',
        sha: sha,
        branch: branch
      };
      const res = await fetch(url, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(body)
      });
      return res.ok;
    }

    // 题目内容显示
    let titlesCache = [];
    async function loadTitles() {
      const txt = await readLocalFile('title.txt');
      if (!txt) return [];
      return txt.replace(/\r\n/g, '\n').split('\n');
    }
    document.getElementById('id').addEventListener('input', async function() {
      const id = parseInt(this.value, 10);
      const show = document.getElementById('showTitle');
      if (!titlesCache.length) titlesCache = await loadTitles();
      if (id >= 1 && id <= titlesCache.length) {
        show.textContent = '题目内容：' + titlesCache[id - 1];
      } else {
        show.textContent = '';
      }
    });

    document.getElementById('deleteBtn').onclick = async function() {
      const id = parseInt(document.getElementById('id').value, 10);
      const psdInput = document.getElementById('psd').value.trim();
      const msg = document.getElementById('msg');
      msg.textContent = '';
      msg.className = 'msg';

      if (!id || id < 1) {
        msg.textContent = '请输入正确的编号';
        return;
      }
      if (!psdInput) {
        msg.textContent = '请输入密码';
        return;
      }

      msg.textContent = '正在校验...';

      // 读取本地 token 和密码
      const [token, psd, titleTxt] = await Promise.all([
        readLocalFile('gitee-token.txt'),
        readLocalFile('psd.txt'),
        readLocalFile('title.txt')
      ]);
      if (!token) { msg.textContent = '无法读取 gitee-token.txt'; return; }
      if (!psd) { msg.textContent = '无法读取 psd.txt'; return; }
      if (!titleTxt) { msg.textContent = '无法读取 title.txt'; return; }

      if (psdInput !== psd.trim()) {
        msg.textContent = '密码错误';
        return;
      }

      // 删除对应行
      const lines = titleTxt.replace(/\r\n/g, '\n').split('\n');
      if (id > lines.length) {
        msg.textContent = '编号超出范围';
        return;
      }
      lines.splice(id - 1, 1);
      const newContent = lines.join('\n');

      msg.textContent = '正在提交...';

      // 获取 sha
      const sha = await getTitleTxtSha(token.trim());
      if (!sha) {
        msg.textContent = '获取 title.txt sha 失败';
        return;
      }

      // 更新 title.txt
      const ok = await updateTitleTxt(newContent, sha, token.trim());
      if (ok) {
        msg.textContent = '删除成功';
        msg.className = 'msg success';
        // 刷新缓存
        titlesCache = [];
        document.getElementById('showTitle').textContent = '';
      } else {
        msg.textContent = '删除失败，请检查 token 权限';
      }
    };
  </script>
</body>
</html>
